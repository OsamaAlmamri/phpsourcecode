//定义常量
var SUCCESS = 0;
var NOT_LOGGED = -1;
var NOT_PERMITTED = -2;
var ARG_ERROR = -3;
var ALREADY_EXISTS = -4;
var ERROR = -5;

var SEP_I = "\n";	//记录分隔符
var SEP_II = "\t";	//字段分隔符

var ICON_PATH = "storage/icons";	//图标存储地址

$(document).ready(function(){
	//设置提示框位置
    var winW = $(window).width();
    var tipsW = $('#tips').width();
    var tipsX = (winW-tipsW)/2;
    $('#tips').css('left',tipsX);
});

//显示提示框
function showTips(tips){
	var content = '';//提示框内容
	for(var i=0;i<tips.length;i++){
		content += "<div class=\"tip\">" + tips[i] + "</div>";
	}
	
	$('#tips').html(content);
	$('#tips').show();
	
	setTimeout("$('#tips').hide();",5000);
}

//删除字符串两侧空格
function trim(str){ //删除左右两端的空格
	　　return str.replace(/(^\s*)|(\s*$)/g, "");
}

//服务器-浏览器通信对象
function Message(strMsg){
    var message = new Object;
    
    message.MSG_SEP = "[seperator]";
    message.MSG_SUCCESS = 0;
    message.MSG_ERROR = -1;
    message.MSG_NOT_LOGGED = -2;
    message.MSG_NOT_PERMITTED = -3;
    message.MSG_ARG_ERROR = -4;
    message.MSG_ALREADY_EXISTS = -5;
    message.MSG_NONE = -6;
    
	var fields = strMsg.split(message.MSG_SEP);
    message.no = parseInt(fields[0]);
    message.content = fields[1];
    message.generateTime = fields[2];
    
    return message;
}

//浏览器-服务器通信对象
function Command(page, target, func, args){
	var command = new Object;
    
    command.page = page;
    command.target = target;
    command.func = func;
    command.args = args;
    
    //发送命令
    command.send = function(handler){
    	var dest = "index.php?file=" + this.page + "&class=" + this.target + "&fun=" + this.func;
        $.post(dest, args, function(data, stauts){
        	var msg = Message(data);
            handler(msg);
        });
    }
    
    return command;
}

//处理服务器返回数据的默认操作
function msgHandler(msg){
    var tips = new Array();
    tips.push(msg.content);
    showTips(tips);
    
    if(msg.no == msg.MSG_SUCCESS){
    	setTimeout("window.location.reload();", 1000);
    }
}

//检测返回状态
function checkStatus(status, handler){
	var messages = new Array();
	
	switch(status){
		case SUCCESS:
		messages.push("操作成功");
		break;
		
		case NOT_LOGGED:
		messages.push("您尚未登录，请登录后重试");
		break;
		
		case NOT_PERMITTED:
		messages.push("执行操作的请求被拒绝，请确认您享有相关的权限");
		break;
		
		case ARG_ERROR:
		messages.push("您输入的参数有误，请重新输入");
		break;
		
		case ALREADY_EXISTS:
		message.push("数据已存在");
		break;
		
		case ERROR:
		message.push("执行操作时发生错误，我们对此感到十分抱歉");
		break;
		
		default:
		message.push("发生未知错误");
	}
	
	handler(message);
}
//将元素加入到数组中，该元素不能在数组中出现
function array_insert(array, elem){
	//查看元素是否在数组中
    var index = array_index(array, elem);
    if(index != -1)
        return false;
    
    //插入元素
    array.push(elem);
    return true;
}

//检索元素在数组中的位置
function array_index(array, elem){
    for(var i=0; i<array.length; i++){
    	if(array[i] == elem)
            return i;
    }
    
    return -1;
}

//从数组中删除元素
function array_delete(array, elem){
	var index = array_index(array, elem);
    if(index != -1){
    	array.splice(index, 1);
        return true;
    }
    
    return false;
}
