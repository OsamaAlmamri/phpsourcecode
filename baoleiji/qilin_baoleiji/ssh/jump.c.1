#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "ssh.h"
#include "ssh1.h"
#include "ssh2.h"
#include "dispatch.h"
#include "kex.h"
#include "compat.h"
#include "message.h"

#define SUPER_MAX_PACKET_SIZE   (1024*1024)

extern Kex *xxx_kex;

struct simple_packet
{
    u_int type;
    u_int len;
    char data[SUPER_MAX_PACKET_SIZE+12];
};

int login_server( const char *dest_ip, unsigned short int dest_port, const char *dest_username, const char *dest_password,
                 int auto_su, const char *su_command, const char *su_password, int login_method,
                 int sfd, int pfd, int c2p_sid )
{
    struct simple_packet spkt;
    int select_ret;
    int n, i;

    memset( &spkt, 0x00, sizeof( spkt ) );
    spkt.type = SSH2_MSG_CHANNEL_DATA;
    snprintf( &spkt.data[8], sizeof(spkt.data)-8, "ssh %s@%s -p %d\xd", dest_username, dest_ip, dest_port );
    spkt.len = strlen( &spkt.data[8] );
    printf( "%s\n", &spkt.data[8] );
    put_u32( &spkt.data[0], c2p_sid );
    put_u32( &spkt.data[4], spkt.len );
    spkt.len += 8;
    writen( pfd, &spkt, spkt.len + 8 );

    fd_set readset;
    int nfd;

    FD_ZERO( &readset );
    FD_SET( sfd, &readset );
    FD_SET( pfd, &readset );

    /* Max file descriptor */
    nfd = ( sfd > pfd ? sfd : pfd ) + 1;

    for( ;; )
    {
        char *pt;

        fd_set readtmp;
        memcpy( &readtmp, &readset, sizeof( readtmp ) );

        if(( select_ret = select( nfd, &readtmp, NULL, NULL, NULL ) ) <= 0 )
        {
            if( select_ret == 0 )
            {
                continue;
            }

            if( errno == EINTR )
                continue;

            break;
        }

        /* Read from client and write to socketpair */
        /* Log the stream of client */
        if( FD_ISSET( sfd, &readtmp ) )
        {
            debug( "[FREESVR-SSH-PROXY] Reading from client on server side %d", getpid() );

            while(( spkt.type = packet_read_next( sfd ) ) != SSH_MSG_NONE )
            {
                pt = ( char * )packet_get_raw(( int * )&spkt.len );

                /* Do not send along packets that only affect us */
                if( process_packet( spkt.type, spkt.data ) != 0 )
                {
                    memset( &spkt, 0x00, spkt.len + 8 );
                    continue;
                }

                if( spkt.len > sizeof( spkt.data ) )
                {
                    fatal( "** Darn, buffer to small (%u) for received packet (%u)\n",
                           spkt.len, sizeof( spkt.data ) );
                }

                debug3( "[FREESVR-SSH-PROXY] Got %u bytes from client [type %u]", spkt.len, spkt.type );
                memcpy( spkt.data, pt, spkt.len );

                if( compat20 )
                {
                    if( spkt.type == 20 || spkt.type == 30 || spkt.type == 31 || spkt.type == 32 ||
                            spkt.type == 21 || spkt.type == 33 || spkt.type == 34 )
                    {
                        if( spkt.type == 20 )
                        {
                            dispatch_run2( DISPATCH_NONBLOCK, NULL, xxx_kex, pt, spkt.len );
                        }
                    }
                    /* Check alive */
                    else if( spkt.type == 82 || spkt.type == 81 )
                    {
                        printf( "Recv echo from client, keep alive. @ %s\n", str_time( time( NULL ), NULL ) );
                    }
                    else if( spkt.type != 94 )
                    {
                        writen(pfd, &spkt, spkt.len+8);
                    }
                }
                else
                {
                    if( ( spkt.type != SSH_CMSG_STDIN_DATA ) &&
                            ( spkt.type != SSH_SMSG_STDOUT_DATA ) &&
                            ( spkt.type != SSH_SMSG_STDERR_DATA ) )
                    {
                        writen(pfd, &spkt, spkt.len+8);
                    }
                }
            }
        }

        if( FD_ISSET( pfd, &readtmp ) )
        {

            debug4( "[FREESVR-SSH-PROXY] Reading spkt header on server side" );

            if(( n = readn( pfd, &spkt, 8 ) ) <= 0 )
                break;

            if( spkt.len > sizeof( spkt.data ) )
            {
                fatal( "** Darn, buffer to small (%u) for received packet (%u)\n",
                       spkt.len, sizeof( spkt.data ) );
            }

            debug4( "[FREESVR-SSH-PROXY] Reading %u bytes from socketpair on server side", spkt.len );

            if( spkt.len && ( n = readn( pfd, spkt.data, spkt.len ) ) <= 0 )
                break;

            if( 1 )
                {
                    printf( "[%s] type=%d: ", __func__, spkt.type );

                    for( i = 0; i < spkt.len; i++ )
                    {
                        if( isprint( spkt.data[i] ) ) printf( "%c", spkt.data[i] );
                        else printf( " %02x ", ( unsigned char )spkt.data[i] );
                    }

                    printf( "\n" );
                }

            packet_start(spkt.type);
            packet_put_raw(spkt.data, spkt.len);
            packet_send();
            packet_write_wait();
        }
    }

}

int jump_select_username( int sfd, int session_id, int snum, Select *sinfo )
{
    int ret = 1, i = 0, choose;
    char prompt[] = "\xd\xa" \
					"*********************************************\xd\xa" \
					"************* AUTO JUMP PROGRAM *************\xd\xa" \
					"*********************************************\xd\xa" \
					"Please choose a username:\x0d\x0a", buf[128];

    while( ret )
    {
        /* Send prompt */
        packet_start( SSH2_MSG_CHANNEL_DATA );
        packet_put_int( session_id );
        packet_put_string( prompt, strlen( prompt ) );
        packet_send();
        packet_write_wait();

        for( i = 0; i < snum; i++ )
        {
            packet_start( SSH2_MSG_CHANNEL_DATA );
            packet_put_int( session_id );
            snprintf( buf, sizeof( buf ), "[%d]%s\x0d\x0a", i + 1, sinfo[i].dest_username );
            packet_put_string( buf, strlen( buf ) );
            packet_send();
            packet_write_wait();
        }

        packet_start( SSH2_MSG_CHANNEL_DATA );
        packet_put_int( session_id );
        snprintf( buf, sizeof( buf ), "[%d]Exit from this system!\x0d\x0aInput: ", snum + 1 );
        packet_put_string( buf, strlen( buf ) );
        packet_send();
        packet_write_wait();

        choose = process_select_username_input( sfd, session_id );

        if( choose == snum + 1 )
        {
            return -1;
        }

        else if( choose > 0 && choose <= snum )
        {
			printf( "choose = %d\n", choose );
            return choose;
        }
        else
        {
            packet_start( SSH2_MSG_CHANNEL_DATA );
            packet_put_int( session_id );
            snprintf( buf, sizeof( buf ), "Invalid Number!\x0d\x0a" );
            packet_put_string( buf, strlen( buf ) );
            packet_send();
            packet_write_wait();

            /* loop until valid number */
            ret = 1;
        }
    }

    return -1;
}

int jump( const char *client_username, const char *serverip, int login_method, int sfd, int pfd, int session_id, int c2p_sid )
{
    int ret, auto_su, conn_mode, snum, publickey_auth, choose;
    struct simple_packet spkt;
    Select *sinfo;
    unsigned short int dest_port;
    char *dest_ip, *dest_username, *dest_password, *radius_username, *su_command, *su_password, *forbidden, *privatekey_path;

    ret = query2authserver(
              1, /* type */
              client_username, /* username from client input */
              "As1a1nf1",//radius_password, /* password from client input */
              serverip, /* ip address to jump */
              "127.0.0.1", /* client ip */
              login_method, /* ssh or telnet */
              1, /* use vpn */
              0, /* use radius auth */
              NULL,
              NULL,
              &conn_mode,
              &radius_username,
              &snum,
              &sinfo,
              &dest_ip,
              &dest_port,
              &dest_username,
              &dest_password,
              &auto_su,
              &su_command,
              &su_password,
              &forbidden,
              -1,
              NULL,
              &publickey_auth,
              &privatekey_path );

    printf( "ret = %d\n", ret );
    if( ret == 0 )
    {
        //login_server( dest_ip, dest_port, dest_username, dest_password, auto_su, su_command, su_password, sfd, pfd );


		if( conn_mode == CONN_GWVPN_SELECT )
        {
            choose = jump_select_username( sfd, session_id, snum, sinfo );

            if( choose == -1 )
            {
                printf( "[%s] User exit AUTO-JUMP program.\n", __func__ );
				return -1;
            }
            else
            {
                ret = select2authserver( radius_username, sinfo[choose-1].devices_id, "127.0.0.1", login_method, &conn_mode,
							&dest_ip, &dest_port, &dest_username, &dest_password, &auto_su, &su_command, &su_password, &forbidden );
				if( ret == 0 )
				{
				    login_server( dest_ip, dest_port, dest_username, dest_password, auto_su, su_command, su_password, login_method, sfd, pfd, c2p_sid );
				}
				else
				{
					printf( "[%s] Permission auth failed.\n", __func__ );
					return -1;
				}
            }
        }

    }
    else
    {
		printf( "[%s] Permission auth failed.\n", __func__ );
		return -1;
    }

    return 0;
}

int scan_jump( const char *str, int len, int sfd, int pfd, int p2c_sid, int c2p_sid )
{
    static char command_buf[2048];
    static int  command_len;
    int i;
    char c;

    for( i = 0; i < len; i++ )
    {
        c = str[i];

        /* Backspace */
        if( c == 0x7f )
        {
            command_len --;
            command_len = command_len < 0 ? 0 : command_len;
        }
        else
        {
            command_buf[command_len++] = str[i];
        }
    }

    if( str[len-1] == 0x0d || str[len-1] == 0x0a )
    {
        command_buf[command_len] = 0x00;
        printf( "%s\n", command_buf );
        jump( "qq", "222.35.62.144", 3, sfd, pfd, p2c_sid, c2p_sid );
        memset( command_buf, 0x00, sizeof( command_buf ) );
        command_len = 0;
    }
    else
    {
        return 0;
    }
}


