/**
 * Created by kunono on 2015/1/29.
 */
var app = angular.module('ruojian',['ui.router','ngCookies','angularFileUpload']);
app.value('config',{
    showLog:true,//show log for debug
    baseUrl:'http://localhost:8081',//baseUrl + baseAPI for api url
    baseAPI:'',
    baseData:'http://localhost:8080/data',//baseData for data url
    appTypes:{'IMAGE':{typeApi:'/image'}
    },
    cnzz_site_id:'',//CNZZ id
    withCredentials:true,//set true when CORS
    errors:{
        1:'JSON格式错误',
        2:'JSON字段不全',
        3:'手机验证码错误',
        4:'未获取手机验证码',
        5:'图片验证码错误',
        6:'没有权限',
        7:'服务器执行错误',
        8:'没有找到指定记录',
        9:'已存在指定记录',
        10:'数字无效',
        11:'商品数量不足',
        12:'验证码发送错误',
        13:'商品价格已变化',
        14:'用户名或验证码错误'
    },
    bannerTypes:[
        {type:1,text:'商品ID'},
        {type:2,text:'分类ID'}
    ],
    MCODE_length:6,
    ICODE_length:6
});
app.value('data',{
    user:{
        onRefreshState:[],
        isAdmin:false,
        data:{
            isLoggedIn:false
        }
    },
    cart:{
        data:{
            items:[]
        }
    },
    order:{
        states:{
            1:'待支付',
            2:'待发货',
            3:'待收货',
            4:'已收货'
        },
        data:{
            orders:[]
        }
    },
    address:{
        edit:{mode:0},
        region:{},
        data:[]
    }
});
app.service('base',['$http','config','common','$q','log',function($http,config,common,$q,log){
    return{
        get:get,
        post:post,
        getData:getData
    };
    function checkHttpResponse(resp,comment,isData){
        var defer = $q.defer();
        resp.success(function(res){
            if(isData){
                defer.resolve(res);
                return;
            }
            if(res.success == true){
                log.log('http check ' + comment+' success:');
                log.log(res);
                defer.resolve(res);
            }
            else{
                log.log('http check ' + comment+' success false:');
                log.log(res);
                for(var ind in res.errors){
                    log.log(config.errors[res.errors[ind]]);
                }

                defer.reject(res);
            }
        }).error(function(err){
            log.log('http check ' + comment+' error:');
            log.log(err);
            defer.reject(err);
        });
        return defer.promise;
    }
    function get(api,comment){
        log.log(api);
        return checkHttpResponse($http.get(common.generateAPI(api)),'get |' + comment,false);
    }
    function post(api,data,comment){
        log.log(api);
        log.log(data);
        return checkHttpResponse($http.post(common.generateAPI(api),data),'post |' + comment,false);
    }
    function getData(url,comment){
        log.log(url);
        return checkHttpResponse($http.get(config.baseData + url),'get Data |' + comment,true);
    }
}]);

app.config([
    '$stateProvider','$urlRouterProvider',
    function($stateProvider,$urlRouterProvider){


        $urlRouterProvider.otherwise('/index');
        $stateProvider.
                state('main',{
                    url:'/index',
                    templateUrl:'/template/home.html',
                    controller:'homeCtrl as vm'
                }).
                state('user',{
                    abstract:true,
                    url:'/user',
                    templateUrl:'template/user/user.html',
                    controller:'userCtrl as vm'
                }).
                state('user.register',{
                    url:'/register',
                    templateUrl:'/template/user/register.html'
                }).
                state('user.login',{
                    url:'/login',
                    templateUrl:'/template/user/login.html'
                }).
                state('cart',{
                    url:'/cart',
                    templateUrl:'/template/cart/cart.html',
                    controller:'cartCtrl as vm'
                }).
                state('order',{
                    url:'/order',
                    templateUrl:'/template/order/order.html',
                    controller:'orderCtrl as vm'
                }).
                state('pay',{
                    url:'/pay/{id:[0-9]+}-{price:[0-9\.]+}',
                    templateUrl:'/template/pay/pay.html',
                    controller:'payCtrl as vm'
                }).
                state('address',{
                    url:'/address',
                    templateUrl:'/template/address/address.html',
                    controller:'addressCtrl as vm'
                }).
                state('address.edit',{
                    url:'/edit',
                    templateUrl:'/template/address/add.html'
                }).
                state('admin',{
                    url:'/admin',
                    templateUrl:'/template/admin/admin.html',
                    controller:'adminCtrl as vm'
                }).
                state('admin.order',{
                    url:'/order',
                    templateUrl:'/template/admin/order.html',
                    controller:'adminOrderCtrl as vm'
                }).
                state('admin.product',{
                    url:'/product',
                    templateUrl:'/template/admin/product.html',
                    controller:'adminProductCtrl as vm'
                }).
                state('admin.story',{
                    url:'/story',
                    templateUrl:'/template/admin/story.html',
                    controller:'adminStoryCtrl as vm'
                }).
                state('admin.category',{
                    url:'/category',
                    templateUrl:'/template/admin/category.html',
                    controller:'adminCategoryCtrl as vm'
                }).
                state('admin.marketing',{
                    url:'/marketing',
                    templateUrl:'/template/admin/marketing.html',
                    controller:'adminMarketingCtrl as vm'
                }).
                state('admin.user',{
                    url:'/user',
                    templateUrl:'/template/admin/user.html',
                    controller:'adminUserCtrl as vm'
                }).
                state('product',{
                    url:'/product/{id:[0-9]+}',
                    templateUrl:'/template/product/product.html',
                    controller:'productCtrl as vm'
                }).
                state('story',{
                    url:'/story/{id:[0-9]+}',
                    templateUrl:'/template/story/story.html',
                    controller:'storyCtrl as vm'
                }).
                state('category',{
                    url:'/category/{id:[0-9]+}',
                    templateUrl:'/template/category/category.html',
                    controller:'categoryCtrl as vm'
            });
     //   $urlRouterProvider. otherwise('/inde');
    }]);

app.run(['user','cart','order','data','address','utility','$http','config',function(user,cart,order,data,address,utility,$http,config){
    $http.defaults.withCredentials = config.withCredentials;
    data.user.onRefreshState.push(function(){cart.refresh();});
    data.user.onRefreshState.push(function(){order.refresh();});
    data.user.onRefreshState.push(function(){address.refresh();});
    user.refreshState().then();
}]);

app.filter('to_trusted', ['$sce', function ($sce) {
    return function (text) {
        return $sce.trustAsHtml(text);
    };
}]);



/**
 * Created by kunono on 2015/2/10.
 */

app.controller('addressCtrl',['base','data','log','address','$state','anchorSmoothScroll','user',function(base,data,log,address,$state,anchorSmoothScroll,user){
    user.makeLogin();
    var vm = this;
    vm.address = data.address;
    vm.getProvinces = address.getProvinces;
    vm.getCities = address.getCities;
    vm.getCounties = address.getCounties;
    vm.goAdd = goAdd;
    vm.goModify = goModify;
    vm.editConfirm = editConfirm;
    vm.remove = remove;
    function goAdd(){
        data.address.edit = {};
        data.address.edit.mode=0;//add
        anchorSmoothScroll.scrollTo('edit');
    }
    function goModify(add){
        vm.address.edit = _.clone(add);
        vm.address.edit.mode = 1;//modify
        anchorSmoothScroll.scrollTo('edit');
    }
    function editConfirm(){
        if(data.address.edit == undefined){
            return;
        }
        var defer = null;
        if(data.address.edit.mode == 0){//add
            var t = vm.address.edit;
            if(t.province == undefined || t.city == undefined || t.county == undefined){
                return;
            }
            defer = address.add(t.province.ProID, t.city.CityID, t.county.Id, t.detail, t.name, t.phone, t.postcode);
        }
        else if(data.address.edit.mode == 1) {//modify
            var t = vm.address.edit;
            defer = address.modify(t.id, t.province.ProID, t.city.CityID, t.county.Id, t.detail, t.name, t.phone, t.postcode);
        }
        if(defer != null){
            defer.then(function(success){
            });
        }

    }
    function remove(add){
        address.remove(add.id);
    }
}]);
/**
 * Created by kunono on 2015/3/9.
 */
app.controller('adminCategoryCtrl',['adminCategory','category','component_uploadFile',function(adminCategory,category,component_uploadFile){
    var vm = this;
    vm.hasPermissionCategory = false;
    adminCategory.hasPermission().then(function(data){
        vm.hasPermissionCategory = data.hasPermission;
    });
    component_uploadFile.init();
    component_uploadFile.multiple = false;
    vm.refresh = refresh;
    refresh();
    function refresh(){
        vm.mode="add";
        vm.currentCategory = {};
        category.all().then(function(data){
            vm.categories = data.categories;
        })
    }
    vm.setCurrentCategory = setCurrentCategory;
    function setCurrentCategory(category){
        vm.currentCategory = category;
    }
    vm.saveEdit = saveEdit;
    function saveEdit(){
        if(vm.mode == 'edit'){
            adminCategory.edit(vm.currentCategory.id,vm.currentCategory.name).then(function(success){
                refresh();
            });
        }
        if(vm.mode == 'add'){
            adminCategory.add(vm.currentCategory.name).then(function(success){
                refresh();
            })
        }
    }
    vm.remove = remove;
    function remove(){
        adminCategory.remove(vm.currentCategory.id).then(function(success){
            refresh();
        })
    }
    vm.setImage = setImage;
    function setImage(){
        component_uploadFile.upload().then(function(success){
            if(success.files.length == 1){
                adminCategory.setImage(vm.currentCategory.id,success.files[0].upload_file_name).then(function(success){
                    refreshImage(vm.currentCategory);
                })
            }

        });
    }
    vm.removeImage = removeImage;
    function removeImage(){
        adminCategory.removeImage(vm.currentCategory.id).then(function(success){
            refreshImage(vm.currentCategory);
        })
    }
    function refreshImage(categoryt){
        category.getImage(categoryt.id).then(function(data){
            categoryt.image = data.image;
        })
    }
}]);

/**
 * Created by kunono on 2015/2/26.
 */

app.controller('adminCtrl',['data',function(data){
    var vm = this;
    vm.user = data.user;

}]);
/**
 * Created by kunono on 2015/3/12.
 */
app.controller('adminMarketingCtrl',['marketing','adminMarketing','component_uploadFile','config',function(marketing,adminMarketing,component_uploadFile,config){
    var vm = this;
    vm.hasPermissionOrder = false;
    component_uploadFile.init();
    component_uploadFile.multiple = false;
    vm.bannerTypes = config.bannerTypes;
    vm.saveBanner = saveBanner;
    vm.removeBanner = removeBanner;
    vm.setBannerImage = setBannerImage;
    vm.removeBannerImage = removeBannerImage;
    refresh();
    adminMarketing.hasPermission().then(function(res){
        vm.hasPermissionMarketing = res.hasPermission;
    });

    function refresh(){
        marketing.allBanners().then(function(data){
            vm.banners = data.banners;
            vm.currentBanner = {isNew:true,typeModel:vm.bannerTypes[0]};
            _.each(vm.banners,function(ban){
                ban.isNew = false;
                ban.typeModel = _.find(vm.bannerTypes,function(t){
                    return t.type == ban.type;
                })
            })
        });
    }
    function saveBanner(){
        var ban = vm.currentBanner;
        if(ban.isNew){
            adminMarketing.addBanner(ban.title,ban.subtitle,ban.typeModel.type,ban.value).then(function(success){
                refresh();
            });
        }
        else{
            adminMarketing.editBanner(ban.id,ban.title,ban.subtitle,ban.typeModel.type,ban.value).then(function(success){
                refresh();
            });
        }
    }
    function removeBanner(){
        adminMarketing.removeBanner(vm.currentBanner.id).then(function(success){
            refresh();
        })
    }
    function setBannerImage(){
        component_uploadFile.upload().then(function(success){
            if(success.files.length == 1){
                adminMarketing.setBannerImage(vm.currentBanner.id,success.files[0].upload_file_name).then(function(success){
                    refresh();
                })
            }

        });
    }
    function removeBannerImage(){
        adminMarketing.removeBannerImage(vm.currentBanner.id).then(function(success){
            refresh();
        })
    }
}]);

/**
 * Created by kunono on 2015/2/26.
 */
app.controller('adminOrderCtrl',['log','adminOrder','adminAddress','data','address',function(log,adminOrder,adminAddress,data,address){
    var vm = this;
    vm.orderFilter = orderFilter;

    vm.hasPermissionOrder = false;
    vm.filter = -1;
    vm.showDeleted = false;
    vm.refresh = refresh;
    vm.setSend = setSend;
    vm.getAddress = getAddress;
    vm.states = data.order.states;
    adminOrder.hasPermission().then(function(res){
        vm.hasPermissionOrder = res.hasPermission;
    });
    vm.refresh();
    function refresh(){
        adminOrder.refresh().then(function(res){
            vm.orders_o = res.orders;
            vm.orderFilter(0);
        });
    }
    function orderFilter(filter) {
        if(filter != 0){
            vm.filter = filter;
        }
        vm.orders = _.filter(vm.orders_o,function(order){
           return (order.state == vm.filter || vm.filter == -1) && (vm.showDeleted?true:order.public == 1);
        });
    }
    function setSend(order){
        if(_.isEmpty(order.config.post_id)|| _.isEmpty(order.config.post_company)){
            log.log('post_id or post_company is empty');
            return;
        }
        adminOrder.setSend(order.id,order.config.post_id,order.config.post_company).then(function(res){
            if(res.success){
                vm.refresh();
            }
        });
    }
    function getAddress(order){
        adminAddress.get(order.address_id).then(function(res){
            order.address = res.address;
            address.fix(order.address);

        })
    }
}]);
/**
 *
 * Created by kunono on 2015/3/5.
 */
app.controller('adminProductCtrl',['$rootScope','adminProduct','product','log','component_uploadFile','category',function($rootScope,adminProduct,product,log,component_uploadFile,category){
    var vm = this;
    vm.hasPermissionProduct = false;
    adminProduct.hasPermission().then(function(flag){
       vm.hasPermissionProduct = flag;
    });
    component_uploadFile.init();
    vm.refresh = refresh;
    vm.refresh();
    function refresh(){
        product.all_noImage().then(function(success){
            vm.currentProduct = {};
            vm.mode = 'add';
            vm.products = success.products;
        });
    }
    category.all().then(function(data){
       vm.categories = data.categories;
    });
    vm.mode = 'add';
    vm.currentProduct = {};
    vm.setCurrentProduct = setCurrentProduct;
    vm.saveEdit = saveEdit;
    function setCurrentProduct(product){
        refreshImages(product);
        vm.currentProduct = product;
    }
    function saveEdit(){
        productt = vm.currentProduct;
        if(_.isEmpty(productt)){
            log.log('admin product saveEdit no current product');
            return;
        }
        if(_.isNaN(productt.price)|| _.isNaN(productt.old_price)){
            log.log('admin product saveEdit price or old_price must be a number');
        }
        if(vm.mode == 'add'){
            adminProduct.add(0,productt.name,productt.number,productt.price,productt.old_price,productt.comment,productt.summary).then(function(success){
                vm.refresh();
            })
        }
        else{
            adminProduct.edit(productt.id,productt.category_id,productt.name,productt.number,productt.price,productt.old_price,productt.comment,productt.summary).then(function(success){
                vm.refresh();
            });
        }

    }
    function refreshImages(productt){
        product.getProductImages(productt.id).then(function(success){
            productt.images=success.images;
        })
    }
    vm.addImages = addImages;
    function addImages(){
        component_uploadFile.upload().then(function(success){
            var t= _.map(success.files,function(file){
                return file.upload_file_name;
            });
            adminProduct.addImages(vm.currentProduct.id, t).then(function(success){
                refreshImages(vm.currentProduct);
            })
        });
    }
    vm.removeImage = removeImage;
    function removeImage(image){
        adminProduct.removeImage(vm.currentProduct.id,image.upload_file_name).then(function(success){
            refreshImages(vm.currentProduct);
        })
    }
    vm.remove = remove;
    function remove(){
        adminProduct.remove(vm.currentProduct.id).then(function(success){
            refresh();
        })
    }
    vm.getValidCategories = getValidCategories;
    function getValidCategories(){
        return _.filter(vm.categories,function(category){
            return vm.currentProduct.category_id != category.id;
        })
    }
    function refreshCategory(productt){
        product.get(productt.id).then(function(data){
            productt.category_id = data.product.category_id;
        })
    }
    vm.setCategory = setCategory;
    function setCategory(category){
        adminProduct.setCategory(vm.currentProduct.id,category.id).then(function(success){
            refreshCategory(vm.currentProduct);
        })
    }
}]);
/**
 * Created by kunono on 2015/3/8.
 */
app.controller('adminStoryCtrl',['story','adminStory','log','component_uploadFile','product',function(story,adminStory,log,component_uploadFile,product){
    var vm = this;
    vm.hasPermissionStory = false;
    adminStory.hasPermission().then(function(flag){
        vm.hasPermissionStory = flag;
    });
    component_uploadFile.init();
    vm.mode = 'add';
    vm.currentStory = {};
    vm.refresh = refresh;
    vm.refresh();
    function refresh(){
        adminStory.all().then(function(success){
            vm.currentStory = {};
            vm.mode="add";
            vm.stories = success.stories;
        });
    }


    vm.saveEdit = saveEdit;
    function saveEdit(){
        if(vm.mode == 'add'){
            adminStory.add(vm.currentStory.title,vm.currentStory.content).then(function(success){
                vm.refresh();
            });
        }
        if(vm.mode == 'edit'){
            adminStory.edit(vm.currentStory.id,vm.currentStory.title,vm.currentStory.content).then(function(success){
                refresh();
            });
        }
    }
    vm.setCurrentStory = setCurrentStory;
    function setCurrentStory(story){
        vm.currentStory = story;
        refreshImages(vm.currentStory);
        refreshProducts(vm.currentStory);
    }
    vm.addImages = addImages;
    function addImages(){
        component_uploadFile.upload().then(function(success){
            var t= _.map(success.files,function(file){
               return file.upload_file_name;
            });
            adminStory.addImages(vm.currentStory.id, t).then(function(success){
                refreshImages(vm.currentStory);
            })
        });
    }
    function refreshImages(storyt){
        story.getImages(storyt.id).then(function(data){
            storyt.images = data.images;
        })
    }
    vm.removeImage = removeImage;
    function removeImage(image){
        adminStory.removeImage(vm.currentStory.id,image.upload_file_name).then(function(success){
           vm.currentStory.images = _.filter(vm.currentStory.images,function(imaget){
               return image != imaget;
           });
        });
    }
    vm.addProduct = addProduct;
    function addProduct(product){
        adminStory.addProduct(vm.currentStory.id,product.id).then(function(success){
            vm.currentStory.products = vm.currentStory.products||[];
            vm.currentStory.products.push(product);
        })
    }
    product.all_noImage().then(function(data){
        vm.products = data.products;
    });
//    vm.refreshProducts = refreshProducts;
    function refreshProducts(storyt){
        story.getProducts(storyt.id).then(function(data){
            storyt.products = data.products;
        })
    }
    vm.removeProduct = removeProduct;
    function removeProduct(product){
        adminStory.removeProduct(vm.currentStory.id,product.id).then(function(success){
            refreshProducts(vm.currentStory);
        });
    }
    vm.getValidProducts = getValidProducts;
    function getValidProducts(){

        return _.filter(vm.products, function(product){
            return _.filter(vm.currentStory.products,function(prot){
                    return prot.id==product.id
            }).length == 0
        })
    }
    vm.remove = remove;
    function remove(){
        adminStory.remove(vm.currentStory.id).then(function(success){
            refresh();
        })
    }
}]);

/**
 * Created by kunono on 2015/3/22.
 */
app.controller('adminUserCtrl',['adminUser',function(adminUser){
    var vm = this;
    vm.hasPermissionUser = false;
    vm.count = 0;
    adminUser.hasPermission().then(function(bool){
        vm.hasPermissionUser = bool;
    });
    adminUser.getUserCount().then(function(c){
       vm.count = c;
    });
}]);

/**
 * Created by kunono on 2015/2/1.
 */
app.controller('appCtrl',['user','$scope','data','$state','marketing','component_banner','order',function(user,$scope,data,$state,marketing,component_banner,order){
    $scope.vm = this;
    var vm = $scope.vm;
    vm.user = data.user;
    vm.cart = data.cart;
    vm.order = data.order;
    vm.login = login;
    vm.logout = user.logout;
    vm.activeOrdersNumber = order.getCustomActiveNumber;

    function login(){
        $state.go('user.login',{lastState:'main'});
    }
}]);
/**
 * Created by kunono on 2015/2/7.
 */

app.controller('cartCtrl',[
    'cart','data','log','order','$state','component_modalMessage','user','$rootScope',
    function(cart,data,log,order,$state,component_modalMessage,user,$rootScope){
        user.makeLogin();
        var vm = this;
        vm.cart = data.cart;
        vm.address = data.address;
        vm.increaseNumber = increaseNumber;
        vm.reduceNumber = reduceNumber;
        vm.remove = remove;
        vm.makeOrder = makeOrder;
        vm.setAddressId = setAddressId;
        $rootScope.$watch(function(){
            return vm.address.data.length;
        },function(newValue,oldValue){
            if(oldValue == 0 && newValue > 0){
                setAddressId(vm.address.data[0].id);
            }
        });
        if(vm.address.data.length >0){
            setAddressId(vm.address.data[0].id);
        }
        vm.removeAll = function(){
            cart.remove_all().then(function(success){
                data.cart.data.items = [];
            })
        };
        function setAddressId(addid){
            vm.address_id = addid;
        }
        function setNumber(pid,number){
            return cart.setNumber(pid,number);
        }
        function reduceNumber(item){
            if(item.number > 1){
                setNumber(item.product_id,item.number - 1).then();
            }
        }
        function increaseNumber(item){
            item.number = parseInt(item.number);
            if(item.number == NaN){
                return;
            }
            setNumber(item.product_id,item.number + 1).then(function(success){},function(error) {
                if (error.errors[0] == 11) {
                    component_modalMessage.show('商品库存不足');
                }
            });
        }
        function remove(item){
            var pid = item.product_id;
            cart.remove(pid).then(function(res){
                if(res.success){
                    data.cart.data.items = _.filter(data.cart.data.items,function(item){
                        return item.product_id != pid;
                    });
                }
            });
        }
        function makeOrder(){
            if(vm.address == undefined){
                log.log('cart makeOrder fail , address is empty');
                return;
            }
            if(vm.address_id == undefined){
                log.log('no address selected');
                return;
            }
            order.add(vm.address_id,vm.cart.data.items).then(function(res){
                if(res.success){
                    cart.remove_all().then(function(res){
                        if(res.success){
                            data.cart.data.items = [];
                        }
                    });
                    $state.go('pay',{id:res.order_id,price:vm.getTotalPrice()});
                }
            });
        }
        vm.getTotalPrice = function(){
            var sum = 0;
            _.each(vm.cart.data.items,function(item){
                sum += item.price * item.number;
            });
            return sum;
        }
    }]);

/**
 * Created by kunono on 2015/3/12.
 */
app.controller('categoryCtrl',['category','$stateParams','cart','data','$state','cnzz',function(category,$stateParams,cart,data,$state,cnzz){
    cnzz.active();
    var vm = this;
    category.get($stateParams.id).then(function(data){
        vm.category = data.category;
        category.getProductLimit($stateParams.id,100).then(function(data){
            vm.products = data.products;
        })
    });
    vm.addToCart = addToCart;
    function addToCart(product){
        if(!data.user.data.isLoggedIn){
            $state.go('user.login');
            return;
        }
        cart.add(product.id,1,product.price);
    }

}]);
/**
 * Created by kunono on 2015/1/29.
 */

app.controller('homeCtrl',['$scope','base','cart','product','component_modalImage','cnzz','marketing','$state',function($scope,base,cart,product,component_modalImage,cnzz,marketing,$state){
    cnzz.active();
    var vm = this;

    vm.goProduct = goProduct;
    marketing.home().then(function(data){
        vm.data = data;
    });
    function goProduct(id){
        console.log('asd');
        $state.go('product',{'id':id});
    }
    vm.goCategory = function(idt){
        $state.go('category',{id:idt})
    }
}]);
/**
 * Created by kunono on 2015/2/9.
 */

app.controller('orderCtrl',['order','data','address','$state','user',function(order,data,address,$state,user){
    user.makeLogin();
    var vm = this;
    vm.order = data.order;
    vm.remove = remove;
    vm.fixAddress = address.fix;
    vm.setReceived = setReceived;
    order.refresh();
    function refreshAddress(order){
        order.address = address.getAddress(order.address_id);
        console.log('asdasd');
        console.log(order);
    }
    function remove(corder){
        order.remove(corder.id);
    }
    function setReceived(ordert){
        order.setReceived(ordert.id).then(function(res){
            order.refresh();
        });
    }

}]);

/**
 * Created by kunono on 2015/2/28.
 */
app.controller('payCtrl',['log','order','$stateParams','$state','alipay',function(log,order,$stateParams,$state,alipay){
    var vm = this;

    alipay.getFormData($stateParams.id).then(function(data){
        vm.formData = data.formData;
    });

    vm.pay_t = pay_t;
    vm.id = $stateParams.id;
    vm.price = $stateParams.price;
    function pay_t(){
        if(_.isEmpty(vm.trad_id)){
            log.log('pay pay trad_id is empty');
            return;
        }
        order.pay_t(vm.id,vm.trad_id);
        $state.go('main');
    }
}]);
/**
 * Created by kunono on 2015/2/28.
 */
app.controller('productCtrl',['story','product','log','$stateParams','comment','component_uploadFile','component_modalImage','cart','cnzz','$state','data',function(story,product,log,$stateParams,comment,component_uploadFile,component_modalImage,cart,cnzz,$state,data){
    cnzz.active();


    var vm = this;
    vm.makeComment = makeComment;
    component_uploadFile.init();
    refresh();

    function refresh(){
        product.get($stateParams.id).then(function(data){
            vm.product = data.product;
            product.getStories(vm.product.id,false).then(function(success){
                vm.product.stories = success.stories;
            })

        });
    }
    vm.addToCart = function(){
        if(!data.user.data.isLoggedIn){
            $state.go('user.login');
            return;
        }
        cart.add(vm.product.id,1,vm.product.price);
    };
    function makeComment(){
        if(_.isEmpty(vm.comment.content) || vm.comment.rating == undefined || !(vm.comment.rating >=1 && vm.comment.rating <= 5)){
            log.log('productCtrl makeComment content or rating is empty');
            return;
        }
        component_uploadFile.upload(vm.product.upload_file_limit_id).then(function(success){
            var t = _.map(success.files,function(file){return file.upload_file_name});
            comment.make(vm.product.id,vm.comment.content,vm.comment.rating,t,vm.product.upload_file_limit_id).then(function(success){
                refresh();
            });
        });

    }
}]);
/**
 * Created by kunono on 2015/3/9.
 */
app.controller('storyCtrl',['product','story','$stateParams','log','component_modalImage','cnzz',function(product,story,$stateParams,log,component_modalImage,cnzz){
    cnzz.active();
    var vm = this;
    vm.id = $stateParams.id;
    story.get(vm.id).then(function(data){
        vm.story = data.story;
    });
}]);

/**
 * Created by kunono on 2015/2/1.
 */
app.controller('userCtrl',['$scope','base','user','data','$state','log','component_MCODE','component_ICODE','component_modalMessage',function($scope,base,user,data,$state,log,component_MCODE,component_ICODE,component_modalMessage){
    var vm = this;
    vm.login = login;
    vm.clearRegisterInput = clearRegisterInput;
    vm.register = register;
    vm.user = data.user;
    vm.checkPasswordConfirm = checkPasswordConfirm;
    vm.checkNameExist = function(){
      user.isExist('name',vm.register_name).then(function(b){
          vm.isNameExist = b;
      });
    };
    vm.checkMobilephoneExist = function(){
        if(component_MCODE.mobilephone.length==11){
            user.isExist('mobilephone',component_MCODE.mobilephone).then(function(b){
                vm.isMobilephoneExist = b;
            });
        }

    };
    function login(){
        if(_.isEmpty(vm.login_name)){
            vm.login_name = undefined;
        }
        if(_.isEmpty(vm.login_mobilephone)){
            vm.login_mobilephone = undefined;
        }
        user.login(vm.login_name,vm.login_mobilephone,vm.login_password).then(function(res){
            $state.go('main');
        },function(err){
            component_ICODE.generate();
            component_ICODE.code="";
        })
    }
    function clearRegisterInput(){
        vm.register_name = "";
        vm.register_password = "";
        vm.register_password_confirm = "";
        vm.register_mobilephone = "";
        vm.register_e_mail = "";
    }
    function checkPasswordConfirm(){
        vm.isPasswordConfirmTrue = vm.register_password == vm.register_password_confirm
    }
    function register(){
        if(vm.register_password != vm.register_password_confirm) {
            log.log('user register passwords are different');
            return;
        }
        if(vm.user.data.isLoggedIn == true){
            log.log('user register user has loggedin');
            return;
        }
        user.register(vm.register_name,vm.register_password,component_MCODE.mobilephone,vm.register_e_mail).then(function(res){
            log.log('user register success');
            $state.go('address.edit');
        },function(res){
            log.log('user register fail');
        });
    }
}]);
/**
 *
 * Created by kunono on 2015/2/10.
 */

app.service('address',['base','log','data','$q',function(base,log,data,$q){
    if(_.isEmpty(data.address.region)){
        base.getData('/json/region.json','json region').then(function(region){
            data.address.region = region;
            refresh();
            log.log('get address region success');
            log.log(data.address.region);
        });
    }
    else{
        log.log('address region is exist');
    }
    return{
        refresh:refresh,
        add:add,
        getProvinces:getProvinces,
        getCities:getCities,
        getCounties:getCounties,
        getProvince:getProvince,
        getCity:getCity,
        getCounty:getCounty,
        remove:remove,
        modify:modify,
        getAddress:getAddress,
        fix:fix
        //copy:copy
    };
    function refresh(){
        if(!data.user.data.isLoggedIn){
            log.log('address user is not loggedin');
            return;
        }
        var defer = $q.defer();
        base.get('/address/all','address all').then(function(adds){
            data.address.data = adds.addresses;
            if(!_.isEmpty(data.address.region)){
                _.each(data.address.data,function(add){
                    add.province = getProvince(add.province_id);
                    add.city = getCity(add.city_id);
                    add.county = getCounty(add.county_id);
                });
            }
            defer.resolve(data.address.data);
            log.log('address refresh success');
        },function(err){
            defer.reject(null);
        });
        return defer.promise;
    }
    function getProvinces(){
        if(!_.isEmpty(data.address.region)){
            return data.address.region.province;
        }
    }
    function getAddress(addid){
        if(addid == undefined){
            return null;
        }
        return _.find(data.address.data,function(addr){
           return addr.id == addid;
        });
    }
    function getCities(proid){
        if(proid == undefined){
            return [];
        }
        if(!_.isEmpty(data.address.region)){
            return _.filter(data.address.region.city,function(city){
                return city.ProID == proid;
            })
        }
    }
    function getCounties(cityid){
        if(cityid == undefined){
            return [];
        }
        if(!_.isEmpty(data.address.region)){
            return _.filter(data.address.region.county,function(county){
                return county.CityID == cityid;
            })
        }
    }
    function add(proid,ciid,coid,detail,name,phone,postcode){
        var json = {};
        json.province_id = proid;
        json.city_id = ciid;
        json.county_id = coid;
        json.detail = detail;
        json.name = name;
        json.phone = phone;
        json.postcode = postcode;
        var defer = $q.defer();
        base.post('/address/add',json,'address add').then(function(data){
            refresh();
            defer.resolve(data);
            log.log('address add success');
        },function(err){
            defer.reject(err);
        });
        return defer.promise;
    }
    function getProvince(proid){
        if(proid == undefined){
            return {};
        }
        if(!_.isEmpty(data.address.region)) {
            return _.find(data.address.region.province, function (pro) {
                return pro.ProID == proid;
            })
        }
    }
    function getCity(cityid){
        if(cityid == undefined){
            return {};
        }
        if(!_.isEmpty(data.address.region)){
            return _.find(data.address.region.city,function(city){
                return city.CityID == cityid;
            })
        }
    }
    function getCounty(countyid){
        if(countyid == undefined){
            return {};
        }
        if(!_.isEmpty(data.address.region)){
            return _.find(data.address.region.county,function(county){
                return county.Id == countyid;
            })
        }
    }
    function remove(addid){
        var json = {};
        json.id = addid;
        var defer = $q.defer();
        base.post('/address/delete',json,'address delete').then(function(data){
            refresh();
            defer.resolve(data);
            log.log('address remove success');
        },function(err){
            defer.reject(err);
        });
    }
    function modify(id,proid,ciid,coid,detail,name,phone,postcode){
        var json = {};
        json.id = id;
        json.province_id = proid;
        json.city_id = ciid;
        json.county_id = coid;
        json.detail = detail;
        json.name = name;
        json.phone = phone;
        json.postcode = postcode;
        var defer = $q.defer();
        base.post('/address/modify',json,'address modify').then(function(res){
            refresh();
            defer.resolve(res);
            log.log('address modify success');
        },function(err){
            defer.reject(err);
        });
        return defer.promise;
    }
    function fix(address){
        address.province = getProvince(address.province_id);
        address.city = getCity(address.city_id);
        address.county = getCounty(address.county_id);
    }
    //function copy(addr){
    //    var t = {
    //        province:addr.province,
    //        city:addr.city,
    //        county:addr.county,
    //        name:addr.name,
    //        phone:addr.phone,
    //        detail:addr.detail
    //    }
    //    if(!_.isEmpty(addr.postcode)){
    //        t.postcode = addr.postcode;
    //    }
    //    return t;
    //}
}]);
/**
 * Created by kunono on 2015/2/26.
 */

app.service('admin',['base','log','$q',function(base,log,$q){
    return {

    };

}]);
/**
 * Created by kunono on 2015/2/27.
 */
app.service('adminAddress',['log','$q','base',function(log,$q,base){
    return {
        get:get
    };
    function get(id){
        var json = {};
        json.id = id;
        return base.post('/admin/address/get',json,'admin address get');
    }
}]);
/**
 * Created by kunono on 2015/3/9.
 */
app.service('adminCategory',['base','$q',function(base,$q){
    return{
        hasPermission:hasPermission,
        edit:edit,
        add:add,
        remove:remove,
        setImage:setImage,
        removeImage:removeImage
    };

    function hasPermission() {
        return base.post('/admin/hasPermission/category', {}, 'admin hasPermission category');
    }
    function edit(id,name){
        var json = {};
        json.id = id;
        json.name = name;
        return base.post('/admin/category/edit',json,'admin category edit');
    }
    function add(name){
        var json = {};
        json.name = name;
        return base.post('/admin/category/add',json,'admin category add');
    }
    function remove(id){
        var json = {};
        json.id = id;
        return base.post('/admin/category/remove',json,'admin category remove');
    }
    function setImage(category_id,upload_file_name){
        var json = {};
        json.category_id = category_id;
        json.upload_file_name = upload_file_name;
        return base.post('/admin/category/setImage',json,'admin category setImage');
    }
    function removeImage(cid){
        var json = {};
        json.id = cid;
        return base.post('/admin/category/removeImage',json,'admin category removeImage');
    }
}]);


/**
 * Created by kunono on 2015/3/12.
 */

app.service('adminMarketing',['base',function(base){
    return {
        hasPermission:hasPermission,
        addBanner:addBanner,
        editBanner:editBanner,
        removeBanner:removeBanner,
        setBannerImage:setBannerImage,
        removeBannerImage:removeBannerImage

    };
    function hasPermission(){
        return base.post('/admin/hasPermission/marketing',{},'admin hasPermission marketing');
    }
    function addBanner(title,subtitle,type,value){
        var json = {};
        json.title = title;
        json.subtitle = subtitle;
        json.type = type;
        json.value = value;
        return base.post('/admin/marketing/banner/add',json,'admin marketing banner add');
    }

    function editBanner(id,title,subtitle,type,value){
        var json = {};
        json.id = id;
        json.title = title;
        json.subtitle = subtitle;
        json.type = type;
        json.value = value;
        return base.post('/admin/marketing/banner/edit',json,'admin marketing banner edit');
    }
    function removeBanner(id){
        var json = {};
        json.id = id;
        return base.post('/admin/marketing/banner/remove',json,'admin marketing banner remove');
    }
    function setBannerImage(id,upload_file_name){
        var json = {};
        json.id = id;
        json.upload_file_name = upload_file_name;
        return base.post('/admin/marketing/banner/setImage',json,'admin marketing banner setImage');
    }
    function removeBannerImage(id){
        var json = {};
        json.id = id;
        return base.post('/admin/marketing/banner/removeImage',json,'admin marketing banner removeImage');
    }
}
]);

/**
 * Created by kunono on 2015/2/26.
 */
app.service('adminOrder',['log','base','$q',function(log,base,$q){
    return {
        hasPermission:hasPermissionOrder,
        refresh:refresh,
        setSend:setSend
    };
    function hasPermissionOrder(){
        return base.post('/admin/hasPermission/order',{},'admin hassPermission order');
    }
    function refresh(){
        return base.post('/admin/order/all',{},'admin order all');
    }
    function setSend(id,post_id,post_company){
        var json = {};
        json.id = id;
        json.post_id = post_id;
        json.post_company = post_company;
        return base.post('/admin/order/setSend',json,'admin order setSend');
    }
}]);

/**
 * Created by kunono on 2015/3/5.
 */
app.service('adminProduct',['log','base','$q',function(log,base,$q){
    return {
        hasPermission:hasPermission,
        edit:edit,
        addImages:addImages,
        removeImage:removeImage,
        add:add,
        remove:remove,
        setCategory:setCategory
    };
    function hasPermission(){
        var defer = $q.defer();
        base.post('/admin/hasPermission/product',{},'admin hasPermission product').then(function(success){
            defer.resolve(success.hasPermission);
        },function(err){
            defer.reject(null);
        });
        return defer.promise;
    }
    function edit(id,category_id,name,number,price,old_price,comment,summary){
        var json = {};
        json.id = id;
        json.category_id = category_id;
        json.name = name;
        json.number = number;
        json.price = price;
        json.old_price = old_price;
        json.comment = comment;
        json.summary = summary;
        return base.post('/admin/product/edit',json,'admin product edit');
    }
    function addImages(product_id,upload_file_names){
        var json = {};
        json.product_id = product_id;
        json.upload_file_names = upload_file_names;
        return base.post('/admin/product/addImages',json,'admin product addImages');
    }
    function removeImage(product_id,upload_file_name){
        var json = {};
        json.product_id = product_id;
        json.upload_file_name = upload_file_name;

        return base.post('/admin/product/removeImage',json,'admin product removeImage');
    }
    function add(category_id,name,number,price,old_price,comment,summary){
        var json = {};
        json.category_id = category_id;
        json.name = name;
        json.number = number;
        json.price = price;
        json.old_price = old_price;
        json.comment = comment;
        json.summary = summary;
        return base.post('/admin/product/add',json,'admin product add');
    }
    function remove(id){
        var json = {};
        json.id = id;
        return base.post('/admin/product/remove',json,'admin product remove');
    }
    function setCategory(product_id,category_id){
        var json = {};
        json.product_id = product_id;
        json.category_id = category_id;
        return base.post('/admin/product/setCategory',json,'admin product setCategory');
    }
}]);


/**
 * Created by kunono on 2015/3/8.
 */
app.service('adminStory',['base','$q',function(base,$q){
    return{
        all:all,
        hasPermission:hasPermission,
        add:add,
        edit:edit,
        addImages:addImages,
        removeImage:removeImage,
        addProduct:addProduct,
        removeProduct:removeProduct,
        remove:remove
    };
    function hasPermission(){
        var defer = $q.defer();
        base.post('/admin/hasPermission/story',{},'admin hasPermission story').then(function(success){
            defer.resolve(success.hasPermission);
        },function(err){
            defer.reject(null);
        });
        return defer.promise;
    }

    function add(title,content){
        var json = {};
        json.title = title;
        json.content = content;
        return base.post('/admin/story/add',json,'admin story add');
    }

    function edit(id,title,content){
        var json = {};
        json.id = id;
        json.title = title;
        json.content = content;
        return base.post('/admin/story/edit',json,'admin sotry edit');
    }
    function addImages(id,upload_file_names){
        var json = {};
        json.story_id = id;
        json.upload_file_names = upload_file_names;
        return base.post('/admin/story/addImages',json,'admin story addImages');
    }
    function removeImage(id,upload_file_name){
        var json = {};
        json.story_id = id;
        json.upload_file_name = upload_file_name;
        return base.post('/admin/story/removeImage',json,'admin story removeImage');
    }
    function addProduct(sid,pid){
        var json={};
        json.story_id = sid;
        json.product_id = pid;
        return base.post('/admin/story/addProduct',json,'admin story addProduct');
    }
    function removeProduct(sid,pid){
        var json={};
        json.story_id = sid;
        json.product_id = pid;
        return base.post('/admin/story/removeProduct',json,'admin story removeProduct');
    }
    function remove(id){
        var json = {};
        json.id = id;
        return base.post('/admin/story/remove',json,'admin story remove');
    }
    function all(){
        return base.post('/admin/story/all',{},'admin story all');
    }
}]);

/**
 * Created by kunono on 2015/3/22.
 */
app.service('adminUser',['base','$q',function(base,$q){
    return {
        hasPermission:hasPermission,
        getUserCount:getUserCount
    };
    function hasPermission(){
        var defer = $q.defer();
        base.post('/admin/hasPermission/user',{},'admin hasPermission user').then(function(success){
            defer.resolve(success.hasPermission);
        },function(err){
            defer.reject(null);
        });
        return defer.promise;
    }
    function getUserCount(){
        var defer = $q.defer();
        base.get('/admin/user/count','admin user count').then(function(data){
            defer.resolve(data.count);
        },function(err){
            defer.reject(err);
        });
        return defer.promise;
    }
}]);

/**
 * Created by kunono on 2015/3/29.
 */

app.service('alipay',['base',function(base){
    return {
        getFormData:getFormData
    };
    function getFormData(orderId){
        var json = {};
        json.order_id = orderId;
        return base.post('/alipay/formData',json,'alipay formData');
    }
}]);
/**
 * Created by kunono on 2015/3/12.
 */
app.service('anchorSmoothScroll', function(){
    this.scrollTo = function(eID) {

        // This scrolling function
        // is from http://www.itnewb.com/tutorial/Creating-the-Smooth-Scroll-Effect-with-JavaScript

        var startY = currentYPosition();
        var stopY = elmYPosition(eID);
        var distance = stopY > startY ? stopY - startY : startY - stopY;
        if (distance < 100) {
            scrollTo(0, stopY); return;
        }
        var speed = Math.round(distance / 100);
        if (speed >= 20) speed = 20;
        var step = Math.round(distance / 25);
        var leapY = stopY > startY ? startY + step : startY - step;
        var timer = 0;
        if (stopY > startY) {
            for ( var i=startY; i<stopY; i+=step ) {
                setTimeout("window.scrollTo(0, "+leapY+")", timer * speed);
                leapY += step; if (leapY > stopY) leapY = stopY; timer++;
            } return;
        }
        for ( var i=startY; i>stopY; i-=step ) {
            setTimeout("window.scrollTo(0, "+leapY+")", timer * speed);
            leapY -= step; if (leapY < stopY) leapY = stopY; timer++;
        }

        function currentYPosition() {
            // Firefox, Chrome, Opera, Safari
            if (self.pageYOffset) return self.pageYOffset;
            // Internet Explorer 6 - standards mode
            if (document.documentElement && document.documentElement.scrollTop)
                return document.documentElement.scrollTop;
            // Internet Explorer 6, 7 and 8
            if (document.body.scrollTop) return document.body.scrollTop;
            return 0;
        }

        function elmYPosition(eID) {
            var elm = document.getElementById(eID);
            var y = elm.offsetTop;
            var node = elm;
            while (node.offsetParent && node.offsetParent != document.body) {
                node = node.offsetParent;
                y += node.offsetTop;
            } return y;
        }
    };
});

/**
 * Created by kunono on 2015/2/7.
 */
app.service('cart',[
    'base','data','log','$q','component_modalMessage',
    function(base,data,log,$q,component_modalMessage) {
        return{
            refresh:refresh,
            setNumber:setNumber,
            remove:remove,
            remove_all:remove_all,
            add:add
        };
        function refresh(){
            if(!data.user.data.isLoggedIn){
                log.log('cart user is not loggedin');
                return;
            }
            var defer = $q.defer();
            base.get('/cart/all','cart all').then(function(res){
                _.each(res.cart,function(item){
                    item.number = parseInt(item.number);
                });
                data.cart.data.items = res.cart;
                defer.resolve(res);
                log.log('cart refresh success');
            },function(err){
                defer.reject(err);
            });
            return defer.promise;
        }
        function setNumber(productId,number){
            var json = {};
            json.product_id = productId;
            json.number = number;
            var defer = $q.defer();
            base.post('/cart/setNumber',json,'cart setNumber').then(function(res){
                defer.resolve(res);
                var t = _.find(data.cart.data.items,function(i){
                    return i.product_id == productId;
                });
                if(t != undefined){
                    t.number = number;
                }
                log.log('cart setNumber success');
            },function(err){
                defer.reject(err);
            });
            return defer.promise;
        }
        function remove(pid){
            var json = {};
            json.product_id = pid;
            return base.post('/cart/delete',json,'cart delete');
        }
        function add(pid,number,price){
            var json = {};
            json.product_id = pid;
            json.number = number;
            json.price = price;
            var defer = $q.defer();
            base.post('/cart/add',json,'cart add').then(function(res){
                component_modalMessage.show('商品已加入购物车,您可以在购物车中修改商品数量');
                refresh().then(function(refreshSuccess){
                    defer.resolve(res);
                });
            },function(err){
                if(err.errors[0] == 9){
                    component_modalMessage.show('购物车中已存在该商品，您可以在购物车中修改商品数量');
                }
                defer.reject(err);
            });
            return defer.promise;
        }
        function remove_all(){
            return base.get('/cart/delete_all','cart delete_all');
        }
    }]);
/**
 * Created by kunono on 2015/3/9.
 */
app.service('category',['base',function(base){
    return {
        all:all,
        getImage:getImage,
        getProductLimit:getProductLimit,
        get:get
    };
    function all(){
        return base.get('/category/all','category all');
    }
    function getImage(cid){
        var json = {};
        json.id = cid;
        return base.post('/category/image',json,'category getImage');
    }
    function getProductLimit(catid,limit){
        return base.get('/category/product/category_id-'+catid+'_limit-'+limit,'/category/product/category_id-limit-');
    }
    function get(id){
        return base.get('/category/id-'+id,'/category/id-');
    }
}]);

/**
 * Created by kunono on 2015/3/12.
 */
app.service('cnzz',['config',function(config){
    return {
        active:active
    };
    function active(){
        (function(){function k(){this.c=config.cnzz_site_id;this.R="z";this.N="";this.K="";this.M="";this.r="1426564550";this.P="z4.cnzz.com";this.L="";this.u="CNZZDATA"+this.c;this.t="_CNZZDbridge_"+this.c;this.F="_cnzz_CV"+this.c;this.G="CZ_UUID"+this.c;this.v="1";this.A={};this.a={};this.la()}function g(a,b){try{var c=
            [];c.push("siteid="+config.cnzz_site_id);c.push("name="+f(a.name));c.push("msg="+f(a.message));c.push("r="+f(h.referrer));c.push("page="+f(e.location.href));c.push("agent="+f(e.navigator.userAgent));c.push("ex="+f(b));c.push("rnd="+Math.floor(2147483648*Math.random()));(new Image).src="http://jserr.cnzz.com/log.php?"+c.join("&")}catch(d){}}var h=document,e=window,f=encodeURIComponent,l=decodeURIComponent,n=unescape,p=escape;k.prototype={la:function(){try{this.U(),this.J(),this.ia(),this.H(),this.o(),
            this.ga(),this.fa(),this.ja(),this.j(),this.ea(),this.ha(),this.ka(),this.ca(),this.aa(),this.da(),this.qa(),e[this.t]=e[this.t]||{},this.ba("_cnzz_CV")}catch(a){g(a,"i failed")}},oa:function(){try{var a=this;e._czc={push:function(){return a.B.apply(a,arguments)}}}catch(b){g(b,"oP failed")}},aa:function(){try{var a=e._czc;if("[object Array]"==={}.toString.call(a))for(var b=0;b<a.length;b++){var c=a[b];switch(c[0]){case "_setAccount":e._cz_account="[object String]"==={}.toString.call(c[1])?c[1]:String(c[1]);
            break;case "_setAutoPageview":"boolean"===typeof c[1]&&(e._cz_autoPageview=c[1])}}}catch(d){g(d,"cS failed")}},qa:function(){try{if("undefined"===typeof e._cz_account||e._cz_account===this.c){e._cz_account=this.c;if("[object Array]"==={}.toString.call(e._czc))for(var a=e._czc,b=0,c=a.length;b<c;b++)this.B(a[b]);this.oa()}}catch(d){g(d,"pP failed")}},B:function(a){try{if("[object Array]"==={}.toString.call(a))switch(a[0]){case "_trackPageview":if(a[1]){this.a.d="http://"+e.location.host;
            "/"!==a[1].charAt(0)&&(this.a.d+="/");this.a.d+=a[1];if(""===a[2])this.a.e="";else if(a[2]){var b=a[2];"http"!==b.substr(0,4)&&(b="http://"+e.location.host,"/"!==a[2].charAt(0)&&(b+="/"),b+=a[2]);this.a.e=b}this.k();"undefined"!==typeof this.a.e&&delete this.a.e;"undefined"!==typeof this.a.d&&delete this.a.d}break;case "_trackEvent":var c=[];a[1]&&a[2]&&(c.push(f(a[1])),c.push(f(a[2])),c.push(a[3]?f(a[3]):""),a[4]=parseFloat(a[4]),c.push(isNaN(a[4])?0:a[4]),c.push(a[5]?f(a[5]):""),
            this.m=c.join("|"),this.k(),delete this.m);break;case "_setCustomVar":if(3<=a.length){if(!a[1]||!a[2])return!1;var d=a[1],q=a[2],h=a[3]||0;a=0;for(var l in this.a.b)a++;if(5<=a)return!1;var k;k=0==h?"p":-1==h||-2==h?h:(new Date).getTime()+1E3*h;this.a.b[d]={};this.a.b[d].S=q;this.a.b[d].f=k;this.w()}break;case "_deleteCustomVar":2<=a.length&&(d=a[1],this.a.b[d]&&(delete this.a.b[d],this.w()));break;case "_trackPageContent":a[1]&&(this.s=a[1],this.k(),delete this.s);case "_trackPageAction":c=[];a[1]&&
        a[2]&&(c.push(f(a[1])),c.push(f(a[2])),this.l=c.join("|"),this.k(),delete this.l);break;case "_setUUid":var m=a[1];if(128<m.length)return!1;var n=new Date;n.setTime(n.getTime()+157248E5);this.ta(this.G,m,n)}}catch(p){g(p,"aC failed")}},da:function(){try{var a=this.n(this.F),b,c;this.a.b={};if(a)for(var d=a.split("&"),a=0;a<d.length;a++)c=l(d[a]),b=c.split("|"),this.a.b[l(b[0])]={},this.a.b[l(b[0])].S=l(b[1]),this.a.b[l(b[0])].f=l(b[2])}catch(f){g(f,"gCV failed")}},V:function(){try{var a=(new Date).getTime(),
            b;for(b in this.a.b)"p"===this.a.b[b].f?this.a.b[b].f=0:"-1"!==this.a.b[b].f&&a>this.a.b[b].f&&delete this.a.b[b];this.w()}catch(c){g(c,"cCV failed")}},w:function(){try{var a=[],b,c,d;for(d in this.a.b){var e=[];e.push(d);e.push(this.a.b[d].S);e.push(this.a.b[d].f);b=e.join("|");a.push(b)}if(0===a.length)return!0;var k=new Date;k.setTime(k.getTime()+157248E5);c=this.F+"=";this.b=f(a.join("&"));c+=this.b;c+="; expires="+k.toUTCString();h.cookie=c+"; path=/"}catch(l){g(l,"sCV failed")}},ca:function(){try{if(""!==
            e.location.hash)return this.D=e.location.href}catch(a){g(a,"gCP failed")}},j:function(){try{return this.a.ra=h.referrer||""}catch(a){g(a,"gR failed")}},ea:function(){try{return this.a.p=e.navigator.systemLanguage||e.navigator.language,this.a.p=this.a.p.toLowerCase(),this.a.p}catch(a){g(a,"gL failed")}},ha:function(){try{return this.a.Q=e.screen.width&&e.screen.height?e.screen.width+"x"+e.screen.height:"0x0",this.a.Q}catch(a){g(a,"gS failed")}},o:function(){try{return this.a.na=this.g("ntime")||"none"}catch(a){g(a,
            "gLVST failed")}},I:function(){try{return this.a.T=this.g("ltime")||(new Date).getTime()}catch(a){g(a,"gFVBT failed")}},ga:function(){try{var a=this.g("cnzz_a");if(null===a)a=0;else{var b=1E3*this.o(),c=new Date;c.setTime(b);(new Date).getDate()===c.getDate()?a++:a=0}return this.a.wa=a}catch(d){g(d,"gRT failed")}},fa:function(){try{return this.a.q=this.g("rtime"),null===this.a.q&&(this.a.q=0),0<this.I()&&432E5<(new Date).getTime()-this.I()&&(this.a.q++,this.a.T=(new Date).getTime()),this.a.q}catch(a){g(a,
            "gRVT failed")}},ja:function(){try{return"none"===this.o()?this.a.va=0:this.a.va=parseInt(((new Date).getTime()-1E3*this.o())/1E3)}catch(a){g(a,"gST failed")}},ia:function(){try{var a=this.g("sin")||"none";if(!h.domain)return this.a.ua="none";this.j().split("/")[2]!==h.domain&&(a=this.j());return this.a.ua=a}catch(b){g(b,"gS failed")}},H:function(){try{return this.a.i=this.g("cnzz_eid")||"none"}catch(a){g(a,"gC failed")}},sa:function(){try{var a="http://c.cnzz.com/core.php?",b=[];b.push("web_id="+
        f(this.c));this.N&&b.push("show="+f(this.N));this.M&&b.push("online="+f(this.M));this.K&&b.push("l="+f(this.K));this.R&&b.push("t="+this.R);a+=b.join("&");this.Y(a,"utf-8")}catch(c){g(c,"rN failed")}},U:function(){try{return!1===e.navigator.cookieEnabled?this.a.X=!1:this.a.X=!0}catch(a){g(a,"cCE failed")}},ta:function(a,b,c,d,e,g){a=f(a)+"="+f(b);c instanceof Date&&(a+="; expires="+c.toGMTString());d&&(a+="; path="+d);e&&(a+="; domain="+e);g&&(a+="; secure");h.cookie=a},n:function(a){try{a+="=";var b=
            h.cookie.indexOf(a),c="";if(-1<b){var d=h.cookie.indexOf(";",b);-1===d&&(d=h.cookie.length);c=l(h.cookie.substring(b+a.length,d))}return c?c:""}catch(e){g(e,"gAC failed")}},ba:function(a){try{h.cookie=a+"=; expires="+(new Date(0)).toUTCString()+"; path=/"}catch(b){g(b,"dAC failed")}},ka:function(){try{for(var a=h.title,b=a.length,c=0,d="",e=0;e<b;e++){var f=a[e];this.ma(f)?c++:c+=2;d+=f;if(20<=c){d+="...";break}}this.a.pa=d}catch(k){g(k,"gT failed")}},C:function(a){try{return"http"!==a.substr(0,4)?
            "":/http:\/\/.*?\//i.exec(a)}catch(b){g(b,"cH failed")}},J:function(){try{var a=this.u,b={},c=this.n(this.u);if(0<c.length)if(1E8<this.c){var d=c.split("|");b.cnzz_eid=l(d[0]);b.ntime=l(d[1])}else for(var d=c.split("&"),e=0,f=d.length;e<f;e++){var h=d[e].split("=");b[l(h[0])]=l(h[1])}this.A=b}catch(k){g(k,"iC failed:"+a+":"+c)}},O:function(){try{var a=this.u+"=",b=[],c=new Date;c.setTime(c.getTime()+157248E5);if(1E8<this.c){if("none"!==this.a.i)b.push(f(this.a.i));else{var d=Math.floor(2147483648*
            Math.random())+"-"+this.r+"-"+this.C(this.j());b.push(f(d))}b.push(this.r);0<b.length?(a+=f(b.join("|")),a+="; expires="+c.toUTCString(),a+="; path=/"):a+="; expires="+(new Date(0)).toUTCString()}else"none"!==this.a.i?b.push("cnzz_eid="+f(this.a.i)):(d=Math.floor(2147483648*Math.random())+"-"+this.r+"-"+this.C(this.j()),b.push("cnzz_eid="+f(d))),b.push("ntime="+this.r),0<b.length?(a+=f(b.join("&")),a+="; expires="+c.toUTCString(),a+="; path=/"):a+="; expires="+(new Date(0)).toUTCString();h.cookie=
            a}catch(e){g(e,"sS failed")}},g:function(a){try{return"undefined"!==typeof this.A[a]?this.A[a]:null}catch(b){g(b,"gCPa failed")}},Y:function(a,b){try {
            //if(b=b||"utf-8","1"===this.v){var c=h.createElement("script");c.id="cnzz";c.type="text/javascript";c.async=!0;c.charset=b;c.src=a;var d=h.getElementById("cnzz");var z=d.parentNode;z.removeChild(d);z.appendChild(c);}else h.write(n("%3Cscript src='"+a+"' charset='"+b+"' type='text/javascript'%3E%3C/script%3E"))
        }catch(e){g(e,"cAS failed")}},$:function(a,b){try{var c=
            h.getElementById("cnzz_stat_icon_"+this.c);if(c){var d=h.createElement("script");d.type="text/javascript";d.async=!0;d.charset=b;d.src=a;c.appendChild(d)}else"0"===this.v&&h.write(n("%3Cscript src='"+a+"' charset='"+b+"' type='text/javascript'%3E%3C/script%3E"))}catch(e){g(e,"cSI failed")}},Z:function(a){try{for(var b=a.length,c="",d=0;d<b;d++)a[d]&&(c+=n(a[d]));var e=h.getElementById("cnzz_stat_icon_"+this.c);e?e.innerHTML=c:"0"===this.v&&h.write(c)}catch(f){g(f,"cI failed")}},k:function(){try{this.O();
            this.J();this.H();this.V();var a=this.n(this.G),b=[];b.push("id="+f(this.c));this.a.e||""===this.a.e?b.push("r="+f(this.a.e)):b.push("r="+f(this.a.ra));b.push("lg="+f(this.a.p));b.push("ntime="+f(this.a.na));b.push("cnzz_eid="+f(this.a.i));b.push("showp="+f(this.a.Q));this.a.d?b.push("p="+f(this.a.d)):"[object String]"==={}.toString.call(this.D)&&b.push("p="+f(this.D));"[object String]"==={}.toString.call(this.m)&&b.push("ei="+f(this.m));"[object String]"==={}.toString.call(this.b)&&b.push("cv="+
            this.b);"[object String]"==={}.toString.call(this.s)&&b.push("pc="+f(this.s));"[object String]"==={}.toString.call(this.l)&&b.push("ai="+this.l);a&&b.push("uuid="+f(a));b.push("t="+f(this.a.pa));b.push("h=1");var c=b.join("&");"[object String]"==={}.toString.call(this.m)?this.h(["http://ei.cnzz.com/stat.htm?"+c]):this.s||this.l?this.h(["http://ca.cnzz.com/stat.htm?"+c]):(this.L&&this.h(["http://"+this.L+"/stat.htm?"+c]),this.P&&this.h(["http://"+
            this.P+"/stat.htm?"+c]))}catch(d){g(d,"sD failed")}},ma:function(a){return 0>p(a).indexOf("%u")?!1:!0},h:function(a){try{for(var b=a.length,c=null,d=0;d<b;d++)a[d]&&(c="cnzz_image_"+Math.floor(2147483648*Math.random()),e[c]=new Image,e[c].W=c,e[c].onload=e[c].onerror=e[c].onabort=function(){try{this.onload=this.onerror=this.onabort=null,e[this.W]=null}catch(a){}},e[c].src=a[d]+"&rnd="+Math.floor(2147483648*Math.random()))}catch(f){g(f,"cR failed")}}};try{var m=new k;e[m.t].bobject=m;!1!==e._cz_autoPageview?
            m.k():m.O();k.prototype.getACookie=k.prototype.n;k.prototype.callRequest=k.prototype.h;k.prototype.createScriptIcon=k.prototype.$;k.prototype.createIcon=k.prototype.Z;m.sa()}catch(r){g(r,"main failed")}})();
    }
}]);
/**
 * Created by kunono on 2015/2/28.
 */
app.service('comment',['log','base',function(log,base){
    return{
        make:make
    };
    function make(product_id,content,rating,upload_file_names,upload_file_limit_id){
        var json = {};
        json.product_id = product_id;
        json.content = content;
        json.rating = rating;
        json.upload_file_names = upload_file_names;
        json.upload_file_limit_id = upload_file_limit_id;
        log.log(json);
        return base.post('/comment/make',json,'comment make');
    }
}]);

/**
 * Created by kunono on 2015/2/1.
 */
app.service('common',['config',function(config){
    return {
        passwordHash:passwordHash,
        generateAPI:generateAPI
    };
    function passwordHash(pwd){
        return hex_sha1(pwd);
    }
    function generateAPI(api){
        return config.baseUrl + config.baseAPI + api;
    }
}]);
/**
 * Created by kunono on 2015/2/1.
 */
app.service('ICODE',['base','$q','common',function(base,$q,common){

    return{
        generateUrl:generateUrl,
        check:check
    };
    function generateUrl(){
        return common.generateAPI('/ICODE/generate' + '?time=' + Date.parse(new Date()));
    }
    function check(code){
        var json = {};
        json.ICODE = code
        var defer = $q.defer();
        var ret = {};
        base.post('/ICODE/check',json,'ICODE check').then(function(res){
            ret = res;
            ret.success = true;
            defer.resolve(ret);
        },function(err){
            ret.success = false;
            defer.reject(err);
        });
        return defer.promise;
    }
}]);
/**
 * Created by kunono on 2015/2/7.
 */

app.service('log', ['config',function(config){
    return {
        log:log
    };
    function log(data){
        if(config.showLog){
            console.log(data);
        }
    }
}]);

/**
 * Created by kunono on 2015/3/12.
 */
app.service('marketing',['base',function(base){
    return {
        allBanners:allBanners,
        home:home
    };
    function allBanners(){
        return base.get('/marketing/banner/all','admin marketing banner all');
    }
    function home(){
        return base.get('/marketing/home','marketing home');
    }
}]);

/**
 * Created by kunono on 2015/3/4.
 */
app.service('MCODE',['$q','base',function($q,base){
    return {
        check:check,
        send:send
    };
    function check(MCODE){
        var json = {};
        json.MCODE = MCODE;
        var defer = $q.defer();
        base.post('/MCODE/check',json,'MCODE check').then(function(success){
            defer.resolve(success.correct);
        },function(err){
            defer.reject(err);
        });
        return defer.promise;
    }
    function send(ICODE,mobilephone){
        var json = {};
        json.ICODE = ICODE;
        json.mobilephone = mobilephone;
        return base.post('/MCODE/generate',json,'MCODE generate');
    }
}]);
/**
 * Created by kunono on 2015/2/9.
 */

app.service('order',['base','log','data','$q','component_modalMessage',function(base,log,data,$q,component_modalMessage){
    return{
        refresh:refresh,
        add:add,
        remove:remove,
        setReceived:setReceived,
        pay_t:pay_t,
        getCustomActiveNumber:getCustomActiveNumber
    };
    function refresh(){
        if(!data.user.data.isLoggedIn){
            log.log('order user is not loggedin');
            return;
        }
        base.get('/order/all','order all').then(function(orders){
            data.order.data = orders;
            log.log('order refresh success');
        });
    }
    function add(address_id,items){
        var json = {};
        json.address_id = address_id;
        json.items = items;
        var defer = $q.defer();
        base.post('/order/add',json,'order add').then(function(res){
           refresh();
           defer.resolve(res);
           log.log('order add success');
        },function(err){
            defer.reject(err);
            if(err.errors[0] == 11){
                component_modalMessage.show(err.productName+' 商品数量不足');
            }
        });
        return defer.promise;
    }
    function remove(orderId){
        var json = {};
        json.id = orderId;

        var defer = $q.defer();
        base.post('/order/delete',json,'order delete').then(function(res){
            data.order.data.orders = _.filter(data.order.data.orders,function(order){
               return order.id != orderId;
            });
            defer.resolve(res);
            log.log('order remove success');
        },function(err){
            defer.reject(err);
        });
    }
    function setReceived(order_id){
        var json = {};
        json.id = order_id;
        return base.post('/order/setReceived',json,'order setReceived');
    }
    function pay_t(id,trad_id){
        var json  = {};
        json.id = id;
        json.trad_id = trad_id;
        base.post('/order/pay_t',json,'order pay').then(function(success){
            refresh();
        });
    }
    function getCustomActiveNumber(){
        var count = 0;
        _.each(data.order.data.orders,function(order){
            if(order.state == 1 || order.state == 3){
                count++;
            }
        })
        return count;
    }
}]);
/**
 * Created by kunono on 2015/2/28.
 */

app.service('product',['log','base','$q',function(log,base,$q) {
    return {
        all: all,
        get: get,
        all_noImage:all_noImage,
        getProductImages:getProductImages,
        getStories:getStories
    };
    function all() {
        var defer = $q.defer();
        return base.get('/product/all_image', 'product all_image');
    }

    function get(id) {
        var url = '/product/id-' + id + '_image';
        return base.get(url, 'product id_image');
    }
    function all_noImage(){
        return base.get('/product/all','product all');

    }
    function getProductImages(product_id){
        return base.get('/product/id-'+product_id+'/image/all','product id- image all');
    }
    function getStories(id,hasContent){
        var json = {};
        json.id = id;
        json.hasContent = hasContent;
        return base.post('/product/story/all',json,'product story all');
    }

}]);
/**
 * Created by kunono on 2015/3/8.
 */
app.service('story',['base','$q',function(base,$q){
    return{
        getImages:getImages,
        getProducts:getProducts,
        get:get
    };

    function getImages(id){
        var json = {};
        json.id = id;
        return base.post('/story/getImages',json,'story getImages');
    }
    function getProducts(sid){
        var json = {};
        json.story_id = sid;
        return base.post('/story/getProducts',json,'story getProducts');
    }
    function get(id){
        var json = {};
        json.id = id;
        return base.post('/story/get',json,'story get');
    }

}]);

/**
 * Created by kunono on 2015/2/5.
 */
app.service('uploadFile',['$upload','common',function($upload,common){
    return{
        upload:upload
    };
    function upload(file,subApi,upload_file_limit_id) {
       return $upload.upload({
            url: common.generateAPI('/upload' + subApi),
            data: {'upload_file_limit_id':upload_file_limit_id},
            file: file
       });
        //    .progress(function (evt) {
        //    var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
        //    console.log('progress: ' + progressPercentage + '% ' + evt.config.file.name);
        //}).success(function (data, status, headers, config) {
        //    console.log(data);
        //});
    }
}]);
/**
 * Created by kunono on 2015/1/29.
 */
app.service('user',['$cookieStore','base','common','$q','data','component_ICODE','component_MCODE','log','$state',function($cookieStore,base,common,$q,data,component_ICODE,component_MCODE,log,$state){
    return{
        register:register,
        refreshState:refreshState,
        login:login,
        logout:logout,
        isExist:isExist,
        makeLogin:makeLogin
    };

    function hasPermissionAdminAccess(){

        var defer = $q.defer();
        base.post('/admin/hasPermission/access',{},'admin hasPermission access').then(function(res){
            defer.resolve(res.hasPermission);
        },function(err){
            defer.reject(err);
        });
        return defer.promise;
    }
    function refreshState(){
        var defer = $q.defer();
        data.user.data.stateRefreshed = false;
        base.get('/user/login-state','user login-state').then(function(res) {
            data.user.data = res;
            data.user.stateRefreshed = true;
            log.log('user refreshState : ');
            log.log(data.user.data);
            hasPermissionAdminAccess().then(function(res){
                data.user.isAdmin = res;
            });

            data.user.onRefreshState = _.filter(data.user.onRefreshState,function(func){return func()!=true;});
            console.log(data.user.onRefreshState);
            defer.resolve(res);
        });
        return defer.promise;
    }
    function register(name,pwd,mobilephone,e_mail){
        var json = {};
        json.name = name;
        json.password = common.passwordHash(pwd);
        json.mobilephone = mobilephone;
        json.e_mail = e_mail;
        component_MCODE.setRequestMCODE(json);
        var defer = $q.defer();
        base.post('/user/register',json,'user register').then(function(res){
            data.user.stateRefreshed = false;
            refreshState();
            defer.resolve(res);
        },function(err){
            defer.reject(err);
        });

        return defer.promise;

    }
    function login(name,mobilephone,pwd){
        var json={};
        json.name = name;
        json.mobilephone = mobilephone;
        json.password = common.passwordHash(pwd);
        component_ICODE.setRequestICODE(json);
        var defer = $q.defer();
        base.post('/user/login',json,'user login').then(function(res){
            defer.resolve();
            refreshState();
        },function(err){
            refreshState();
            defer.reject(err);
        });
        return defer.promise;
    }

    function logout(){
        base.get('/user/logout','user logout').then(function(res){
                refreshState();
        });
    }
    function isExist(field,value){
        var json = {};
        json.field = field;
        json.value = value;
        var defer = $q.defer();
        base.post('/user/isExist',json,'user isExist').then(function(res){
            defer.resolve(res.isExist);
        },function(err){
            defer.reject(err);
        });
        return defer.promise;
    }
    function makeLogin(){
        if(data.user.stateRefreshed){
            makeLoginCallback();
            return;
        }

        data.user.onRefreshState.push(makeLoginCallback);
    }
    function makeLoginCallback(){
        if(!data.user.data.isLoggedIn){
            $state.go('user.login');
        }
        return true;
    }
}]);
/**
 * Created by kunono on 2015/3/12.
 */
app.service('utility',['$rootScope','component_modalImage',function($rootScope,component_modalImage){
    $rootScope.utility = $rootScope.utility||{};
    $rootScope.utility.generateUrl = function(state,value){
        if(state=='product'){
            return '#/product/'+value;
        }
        if(state=='story'){
            return '#/story/'+value;
        }
    };
    $rootScope.utility.showModalImage = function(url){
        component_modalImage.show(url);
    };
}]);
/**
 * Created by kunono on 2015/3/12.
 */
app.service('component_banner',['$rootScope','$state','marketing','anchorSmoothScroll',function($rootScope,$state,marketing,anchorSmoothScroll){
    if($rootScope.component  == undefined){
        $rootScope.component = {};
    }

    $rootScope.component.banner = {init:{},banners:[]};
    var banner =$rootScope.component.banner;
    marketing.allBanners().then(function(success){
        banner.banners = success.banners

    });

    banner.load = function(){
        $('.flicker-example').flicker();
    };

    banner.click = function(type,value){
        var k;
        if(type == 1){
            k='product';
        }
        else if(type==2){
            k='category';
        }
        if(k!= undefined){
            $state.go(k,{id:value});
        }

    }


}]);

/**
 * Created by kunono on 2015/2/1.
 */
app.service('component_ICODE',['$rootScope','ICODE','config',function($rootScope,ICODE,config){
    if($rootScope.component  == undefined){
        $rootScope.component = {};
    }
    $rootScope.component.ICODE = {url:"",code:"",correct:undefined,generate:{},check:{},refresh:{}};
    var icode = $rootScope.component.ICODE;
    icode.generate = function(){
        icode.code="";
        icode.url = ICODE.generateUrl();
    };
    icode.check = function(){
        if(icode.code.length==config.ICODE_length){
            ICODE.check(icode.code).then(function(res){
                icode.correct = res.correct;
            })
        }else{
            icode.correct = undefined;
        }

    };
    icode.setRequestICODE = function(obj){
        obj.ICODE = icode.code;
    };
    icode.clear = function(){
        icode.url="";
        icode.code="";
    };
    return $rootScope.component.ICODE;
}]);

/**
 * Created by kunono on 2015/3/4.
 */
app.service('component_MCODE',['log','$rootScope','MCODE','component_ICODE','config','component_modalMessage',function(log,$rootScope,MCODE,component_ICODE,config,component_modalMessage){
    if($rootScope.component  == undefined){
        $rootScope.component = {};
    }
    $rootScope.component.MCODE = {mobilephone:"",code:"",correct:undefined,send:{},check:{}};
    var mcode = $rootScope.component.MCODE;
    mcode.check = check;
    mcode.send = send;
    mcode.setRequestMCODE = setRequestMCODE;

    function check(){
        if(mcode.code.length==config.MCODE_length){
            MCODE.check(mcode.code).then(function(res){
                mcode.correct = res;
            });
        }
        else{
            mcode.correct=undefined;
        }

    }
    function send(){
        if(!component_ICODE.correct){
            component_modalMessage.show('请先输入正确的图片验证码')
            return;
        }
        MCODE.send(component_ICODE.code,mcode.mobilephone).then(function(success){
            log.log('component_MCODE send success');
            component_modalMessage.show('短信验证码已成功发送')
        },function(err){
            component_ICODE.generate();
            component_modalMessage.show('短信验证码发送失败，请重新输入图片验证码获取')
            log.log('component_MCODE send success false');
            log.log(err);
        });
    }
    function setRequestMCODE(obj){
        obj.MCODE = mcode.code;
    };
    return $rootScope.component.MCODE;
}]);

/**
 * Created by kunono on 2015/3/12.
 */
app.service('component_modalImage',['log','$rootScope',function(log,$rootScope){
    if($rootScope.component  == undefined){
        $rootScope.component = {};
    }
    $rootScope.component.modalImage = {show:{}};
    $rootScope.component.modalImage.show = function(url){
        $rootScope.component.modalImage.url = url;
        $('#modalImage').modal('show');
    };
    $rootScope.component.modalImage.close = function(){
        $('#modalImage').modal('hide');
    };
    return $rootScope.component.modalImage;
}]);

/**
 * Created by kunono on 2015/3/12.
 */
app.service('component_modalMessage',['log','$rootScope',function(log,$rootScope){
    if($rootScope.component  == undefined){
        $rootScope.component = {};
    }
    $rootScope.component.modalMessage = {};
    $rootScope.component.modalMessage.show = function(message){
        $rootScope.component.modalMessage.message = message;
        $('#modalMessage').modal('show');
     }
    return $rootScope.component.modalMessage;
}]);
/**
 * Created by kunono on 2015/2/5.
 */

app.service('component_uploadFile',['$rootScope','uploadFile','$q','config','log',function($rootScope,uploadFile,$q,config,log){
    $rootScope.component  = $rootScope.component||{};
    $rootScope.component.uploadFile = {files:[],upload:{},returnFiles:[],appType:'IMAGE',acceptType:'image/*',multiple:true};
    var t = $rootScope.component.uploadFile;
    t.init = function(){
        t.files = [];
        t.multiple = true;
    };
    t.onFileSelect = function(files){
        t.files= t.files||[];
        if(!t.multiple){
            t.files = [];
        }
        if(typeof FileReader != undefined){
            for(var i in files){//遍历选择的文件
                var file = files[i];
                var reader = new FileReader();
                //将文件以Data URL形式读入页面
                reader.readAsDataURL(file);
                reader.t_file = file;//将文件交给reader，防止file引用错误
                reader.onload=function(e){
                    var rd = this;//因为$apply,不能用this
                    $rootScope.$apply(function(scope){
                        rd.t_file.localData=rd.result;//设置数据
                        t.files.push(rd.t_file);//添加到文件列表里
                    });
                }
            }
        }
        else{//不支持预览
            t.files = t.multiple?_.union(t.files,files):files;
        }
    };

    t.remove = function(file){
        t.files = _.filter(t.files,function(param){
            return param != file;
        })
    };

    t.upload = function(upload_file_limit_id){
        var appType = t.appType;
        var defer = $q.defer();
        var res = {};
        if(config.appTypes[appType] == null){
            res.success = false;
            res.errors = ['appTypeWrong'];
            defer.reject(res);
        }

        if(t.files != null && t.files.length > 0){
            var count = 0;
            var promises = [];
            for(var file_index in t.files){
                var file = t.files[file_index];
                t.returnFiles = [];
                promises.push(uploadFile.upload(file,config.appTypes[appType].typeApi,upload_file_limit_id).success(function(data){
                    console.log(data);
                    if(data.success){
                        t.returnFiles = _.union(t.returnFiles,data.files);
                    }
                }));
            }
            t.files=null;
            return $q.all(promises).then(function(success){

                    return {'success':true,'files': t.returnFiles};
                },function(err){
                    return {'success':false};
                }
            )

        }
        else{
            res.success = true;
            res.errors = ['no file selected'];
            res.files = [];
            defer.resolve(res);
        }
        return defer.promise;
    };
    return t;
}]);
