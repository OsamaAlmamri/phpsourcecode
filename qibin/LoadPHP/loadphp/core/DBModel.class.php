<?php// +----------------------------------------------------------------------// | Loadphp Framework designed by www.loadphp.com// +----------------------------------------------------------------------// | Copyright (c) 2013 http://www.loadphp.com All rights reserved.// +----------------------------------------------------------------------// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )// +----------------------------------------------------------------------// | Author: 亓斌 <qibin0506@gmail.com>// +----------------------------------------------------------------------/** +------------------------------------------------------------------------------ * 数据库操作类(PDO) +------------------------------------------------------------------------------ */class DBModel {    protected static $pdo = null;    protected $stmt;    protected $table;           //表名    protected $fetchMode;       //遍历索引    protected $sql = '';        //组合sql语句    protected $attach = '';     //where等子句    protected $value = array();        // +构造方法    function __construct() {        $this->fetchMode = PDO::FETCH_BOTH;        self::$pdo->query("set names UTF8");    }        // +静态链接数据库    static function connect($dsn,$user="root",$pwd="") {        try {            if(null==self::$pdo) {                self::$pdo = new PDO($dsn,$user,$pwd,array(PDO::ATTR_ERRMODE=>1));            }        }catch(PDOException $e) {            echo $e->getMessage();            exit();        }    }        protected function initColumn() {        $this->sql ="SELECT * FROM ".$this->table;        $this->prepareSql();        $this->stmt->execute($this->value);        $this->resetAttribute();    }        /**     * 设置表名     * @return void     */    function __set($attr,$val) {        if("table" == strtolower($attr)) {              $this->table = $val;            $this->initColumn();        }else return;    }        /**     * 执行where() order() limit() 等     * where(array("id>"=>1,"name"=>'load'),"or")  order("id DESC") limit("1") limit("1,5")     * @access global     * @param mixed $method     * @param mixed $args     * @return $this     */    function __call($method,$argments=array()) {        $method = strtoupper($method);        if("WHERE"==$method) {  //where id=:id or name=:name where(array("id>"=>1))            $where = $argments[0];            if(empty($where)) {                return $this;            }            $conn = (empty($argments[1]) ? ' ' : ' '.$argments[1]).' ';            $att = array();            foreach($where as $key=>$val) {                if(preg_match("/=|<|>|\blike\b$/i",$key)) {                    $hold = ':'.preg_replace("/=|<|>|\blike\b$/i",'',$key);                    $hold = str_replace(" ","",$hold);                    $this->value[$hold] = $val;                    $att[] = $key.' '.$hold;                }else {                    $this->value[':'.$key] = $val;                    $att[] = $key.' =:'.$key;                }            }            $this->attach .= " WHERE ".implode($conn,$att);        }else if("ORDER"==$method) { //order("id DESC")            if(empty($argments[0])) {                return $this;            }            $this->attach .= " ORDER BY ".$argments[0];        }else if("LIMIT"==$method) {  //limit(1)  limit(1,10)            if(empty($argments[0])) {                return $this;            }            $this->attach .= " ".$argments[0];        }                return $this;    }        /**     * 准备一条sql语句     * @access protected     * @return void     */    protected function prepareSql() {        $this->stmt = self::$pdo->prepare($this->sql.$this->attach);    }        /**     * 清空组合语句     * 每次操作成功后调用     * @access protected     * @return void     */    protected function resetAttribute() {        $this->sql = '';        $this->attach = '';        $this->value = array();    }        /**     * 得到字段个数     * @access private     * @return 字段的个数     */    protected function getColumnCount() {        $this->initColumn();        return $this->stmt->columnCount();    }        /**     * 组合字段     * @access private     * @return 组合好的字段     */    protected function getField() {        $field = array();        for($i=0;$i<$this->getColumnCount();$i++) {            $meta = $this->stmt->getColumnMeta($i);            $field[] = $meta['name'];        }        return implode(",",$field); //string    }        /**     * 设置数组索引     * @param mixed $mode     * @return void     */    function setFetchMode($mode) {        switch($mode) {            case 0 : $this->fetchMode=PDO::FETCH_BOTH;break;            case 1 : $this->fetchMode=PDO::FETCH_NUM;break;            case 2 : default : $this->fetchMode=PDO::FETCH_ASSOC;        }    }        /**     * insert语句  insert into table id,name values (NULL,2)     * @access global     * @param array $value 插入的值     * @return 最后插入id     */    function insert($value=array()) {        $bind = array();        for($i=0;$i<$this->getColumnCount();$i++) {            $bind[] = '?';        }        $bind = implode(',',$bind);        $sql = "INSERT INTO ".$this->table." (".$this->getField().") VALUES (".$bind.")";        $this->stmt = self::$pdo->prepare($sql);        if($this->stmt->execute($value)) {            return self::$pdo->lastInsertId();        }        return false;    }        /**     * update语句 update table set key=val,key=val where id=1     * @access global     * @param array $set 更新字段及值 (array("id"=>1))     * @return true or false     */    function update($set=array()) {        //连接更新字段        $keys = array_keys($set);        for($i=0;$i<count($keys);$i++) {            $keys[$i] .= "=:".$keys[$i];        }        $bind = implode(",",$keys);        $this->sql = "UPDATE ".$this->table." SET ".$bind;                $this->prepareSql();                foreach($set as $key=>$val) {            $this->value[':'.$key] = $val;        }                if($this->stmt->execute($this->value)) {            $this->resetAttribute();            return true;        }        return false;    }        /**     * delete语句 delete form table where id=1     * @access global     * @return true or false     */    function del() {        $this->sql = "DELETE FROM ".$this->table;        $this->prepareSql();        if($this->stmt->execute($this->value)) {            $this->resetAttribute();            return true;        }        return false;    }        /**     * select语句 select id,name,price from table where id=1 order by id desc limit 1 (查询全部)     * @access global     * @param array $field 差性能字段     * @return 查询结果(二维数组)     */    function findAll($field=array("*")) {        //组合字段        if(count($field) > 1) {            $field = implode(",",$field);        }else {            $field = $field[0];        }        $this->sql = "SELECT ".$field." FROM ".$this->table;        $this->prepareSql();        if($this->stmt->execute($this->value)) {            $this->resetAttribute();            $this->stmt->setFetchMode($this->fetchMode);            return $this->stmt->fetchAll();        }        return false;            }        /**     * select语句 （查询单条记录）     * @access global     * @param array $field 差性能字段     * @return 查询结果(一维数组)     */    function find($field=array("*")) {        //组合字段        if(count($field) > 1) {            $field = implode(",",$field);        }else {            $field = $field[0];        }        $this->sql = 'SELECT '.$field." FROM ".$this->table;        $this->prepareSql();        if($this->stmt->execute($this->value)) {            $this->resetAttribute();            $this->stmt->setFetchMode($this->fetchMode);            return $this->stmt->fetch();        }        return false;    }        /**     * 当提供的方法不适用时可以使用该方法     * @access global     * @param mixed $sql     * @return result     */    function query($sql) {        $method = strtolower(substr($sql,0,6));        $stmts = self::$pdo->query($sql);                if("select"==$method) {            $arr = array();            foreach($stmts as $val) {                $arr[] = $val;            }            return $arr;        }else {            return $stmts;        }    }        // +得到查询结果个数    function getRows() {        $this->initColumn();        return $this->stmt->rowCount();    }}?>