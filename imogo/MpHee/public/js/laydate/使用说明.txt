<input onclick="laydate()">
这是是一个最简单的调用方式，它会把自身作为目标元素。除此之外，您还可以按照需求传入一些其它key，比如：
<input onclick="laydate({istime: true, format: 'YYYY-MM-DD hh:mm:ss'})">
那么对于输入框，如果用户乱填怎么办？没关系，laydate会智能纠错，你可以尝试在上述表单输入任意值，然后点击页面其它处测试一下。
当然，您其实还可以设定任何html元素作为目标对象，又比如：<div onclick="laydate()"></div>



【自定义日期格式】
<div id="test1" class="laydate-icon"></div>
<script>
laydate({
    elem: '#test1',
    format: 'YYYY/MM', // 分隔符可以任意定义，该例子表示只显示年月
    festival: true, //显示节日
    choose: function(datas){ //选择日期完毕的回调
        alert('得到：'+datas);
    }
});
</script>

【日期范围限定在昨天到明天】
<div id="hello3" class="laydate-icon"></div>
<script>
laydate({
    elem: '#hello3',
    min: laydate.now(-1), //-1代表昨天，-2代表前天，以此类推
    max: laydate.now(+1) //+1代表明天，+2代表后天，以此类推
});
</script>




开始日：<li class="laydate-icon" id="start" style="width:200px; margin-right:10px;"></li>
结束日：<li class="laydate-icon" id="end" style="width:200px;"></li>
<script>
var start = {
    elem: '#start',
    format: 'YYYY/MM/DD hh:mm:ss',
    min: laydate.now(), //设定最小日期为当前日期
    max: '2099-06-16 23:59:59', //最大日期
    istime: true,
    istoday: false,
    choose: function(datas){
         end.min = datas; //开始日选好后，重置结束日的最小日期
         end.start = datas //将结束日的初始值设定为开始日
    }
};
var end = {
    elem: '#end',
    format: 'YYYY/MM/DD hh:mm:ss',
    min: laydate.now(),
    max: '2099-06-16 23:59:59',
    istime: true,
    istoday: false,
    choose: function(datas){
        start.max = datas; //结束日选好后，重置开始日的最大日期
    }
};
laydate(start);
laydate(end);
</script>




注意事项:
解压后，将laydate整个文件放至您项目的任意目录，不要移动其文件结构，它们具有完整的依赖体系。
使用只需在页面引入laydate.js即可。
如果您的网站的js采用合并或模块加载，您需要打开laydate.js，修改path。
用于实际项目时请保留来源，勿剔除laydate.js头部注释。